%SIMULATION Top-level simulation script
% Sets up the simulation framework, instantiates objects and contains the main simulation loop.
% Do NOT edit this file, use the simulation_options function instead!
% DO Run this script to start the simulation.
%
% Inputs:
%    (none)
%
% Outputs:
%    (none)
%
% Other m-files required: Vehicle, Gravity, Environment, Propulsion, Aerodynamics, Kinematics, VehcileState,
% draw_aircraft, draw_forces, draw_states
% Subfunctions: none
% MAT-files required: none
%
% See also: simulation_options

% Created at 2018/02/15 by George Zogopoulos-Papaliakos

close all;
clear;
clc;

% load_path;

%% Initialize the simulation

fprintf("Initializing simulation options...\n");

% Generate simulation options
sim_options = simulation_options();

% Select model
model_name = sim_options.vehicle;
eval(sprintf("model = %s();", model_name));
% Set graphic
graphic_name = model.graphic;
eval(sprintf("graphic = %s();", graphic_name));

% Instantiate vehicle
vehicle = Vehicle(model);
vehicle.state.initialize(sim_options);

% Generate the rest of the simulation components
gravity = Gravity(sim_options);
environment = Environment(sim_options);
propulsion = Propulsion(vehicle);
aerodynamics = Aerodynamics(vehicle);
kinematics = Kinematics(sim_options);
vehicle_state_new = VehicleState(); % Use a swap variable to update vehicle state

% Setup time vector
t_0 = sim_options.t_0;
t_f = sim_options.t_f;
dt = sim_options.dt;
t = t_0;

% Generate the controller object
controller = Controller(sim_options);

% Initialize saved signals
num_frames = (t_f-t_0)/dt+1;
if sim_options.record_states
    temp_state = vehicle.state.serialize();
    array_states = zeros(size(temp_state,1),num_frames);
end
if sim_options.record_inputs
    array_inputs = zeros(4,num_frames);
end

% Initialize visualization
if sim_options.visualization.draw_graphics
    draw_aircraft(vehicle, graphic, true);    
end
if sim_options.visualization.draw_forces
    plot_forces(gravity, propulsion, aerodynamics, 0, true);    
end
if sim_options.visualization.draw_states
    plot_states(vehicle, 0, true);    
end

%% Begin simulation

fprintf("Starting simulation...\n");


% Main loop:
frame_num = 1;
tic
while (t<t_f)
    
    % Generate controller output, based on previous state
    ctrl_input = controller.gen_control(vehicle.state);
    
    % Calculate gravity
    gravity.calc_gravity(vehicle);
    vec_gravity_force_body = gravity.get_force_body();
    
    % Calculate environment stuff
    environment.calc_state(vehicle);
    
    % Calculate propulsion
    propulsion.calc_propulsion(vehicle, environment, ctrl_input);
    vec_propulsion_force_body = propulsion.get_force_body();
    vec_propulsion_torque_body = propulsion.get_torque_body();
    
    % Calculate aerodynamics
    aerodynamics.calc_aerodynamics(vehicle, environment, ctrl_input);
    vec_aerodynamics_force_body = aerodynamics.get_force_body();
    vec_aerodynamics_torque_body = aerodynamics.get_torque_body();
    
    % Calculate derivatives
    vec_force_body = vec_gravity_force_body + vec_propulsion_force_body + vec_aerodynamics_force_body;
    vec_torque_body = vec_propulsion_torque_body + vec_aerodynamics_torque_body;    
    kinematics.set_wrench_body(vec_force_body,vec_torque_body);
    
    kinematics.set_state(vehicle.state);
    kinematics.calc_state_derivatives(vehicle);
    
    % Integrate kinematics
    kinematics.integrate();
    
    % Update vehicle state
    kinematics.write_state(vehicle_state_new);
    vehicle.set_state(vehicle_state_new);
    
    if sim_options.record_states
        array_states(:,frame_num) = vehicle.state.serialize();
    end
    if sim_options.record_inputs
        array_inputs(:,frame_num) = ctrl_input;
    end
    
    % Update visual output
    if sim_options.visualization.draw_graphics
        draw_aircraft(vehicle, graphic, false);
    end
    if sim_options.visualization.draw_forces
        plot_forces(gravity, propulsion, aerodynamics, t, false);
    end
    if sim_options.visualization.draw_states
        plot_states(vehicle, t, false);
    end
    
    t = t + dt;
    frame_num = frame_num+1;
    
end
wall_time = toc;

fprintf("Simulation ended\n\n");

fprintf("Simulation duration: %f\n", t_f-t_0);
fprintf("Required wall time: %f\n", wall_time);
fprintf("Achieved speedup ratio: %f\n", (t_f-t_0)/wall_time);
